location <- "chapter_files/"
chapter_names <- list.files(location)
# read in all chapter.txt files
all_chapters <- map(chapter_names, function(x) readLines(paste0(location, x)))
head(all_chapters[[1]], 30)
# remove dashes from each chapter
for(chapter in 1:length(all_chapters)) {
# all_chapters[[chapter]] <- process_chapter(all_chapters[[chapter]])
all_chapters[[chapter]] <- remove_dashes(all_chapters[[chapter]])
}
# just to show that the dashes were removed
head(all_chapters[[1]], 30)
styler:::set_style_transformers()
styler:::set_style_transformers()
# Chunk 1
library(mosaic)
library(tidyverse)
library(mdsr)
library(tidytext)
library(stringi)
library(purrr)
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
# Chunk 2
# a function to remove dashes from the ends of line (and combine the truncated words)
# NOTE: this function won't work if the chapter passed in ends in a hyphen,
#       but this shouldn't be an issue
remove_dashes <- function(lines) {
# iterate through all of our lines
for (line in 1:(length(lines) - 1)) {
# if the current line we're on is blank then skip it
if(lines[line] == " " | lines[line] == "") {
next
}
# otherwise, we need to check for a dash at the end of the line
# keep track of the last word in the current line
last_word <- word(lines[line], start = -3)
# if the line that  we're on ends in a dash, then we want to remove it
if(substr(last_word, nchar(last_word), nchar(last_word)) == "-") {
# if the next line is blank, then we need to skip it and check the
# next line for the first word
if(lines[line + 1] == " " | lines[line + 1] == "") {
# keep track of the first word
first_word_next_line <- word(lines[line + 2], start = 1)
}
# otherwise, the first word is on the next line
else{
first_word_next_line <- word(lines[line + 1], start = 1)
}
# keep track of the beginning of the current line
# (not including the truncated word at the end)
beginning_of_line <- word(lines[line], end = -4)
# remove the dash from the last (truncated) word
word_without_dash <- gsub("-", "", last_word)
# update the current line so that the dash is gone and the word from
# the line below is added on
lines[line] = paste0(beginning_of_line, " ", word_without_dash, first_word_next_line)
# now, we need to remove the first part of the word from the line below
# so check again to see if the next line is blank
if(lines[line + 1] == " " | lines[line + 1] == "") {
# if it is, we need to update the line two lines down
# this gets rid of only the first word in the specified line
lines[line + 2] <- word(lines[line + 2],
start = 2:nchar(lines[line + 2]),
end = -1)[1]
}
# otherwise we just update the line one down
else {
lines[line + 1] <- word(lines[line + 1],
start = 2:nchar(lines[line + 1]),
end = -1)[1]
}
} # end if statement that checks for a dash
} # end for loop
# return our updated lines with removed dashes
lines
} # end function
# Chunk 3
# read in the chapter files
location <- "chapter_files/"
chapter_names <- list.files(location)
# read in all chapter.txt files
all_chapters <- map(chapter_names, function(x) readLines(paste0(location, x)))
head(all_chapters[[1]], 30)
# remove dashes from each chapter
for(chapter in 1:length(all_chapters)) {
all_chapters[[chapter]] <- remove_dashes(all_chapters[[chapter]])
}
# just to show that the dashes were removed (compare to output above)
head(all_chapters[[1]], 30)
all_chapters[[1]]
all_chapters[[0]]
all_chapters[[2]]
# Chunk 1
library(mosaic)
library(tidyverse)
library(mdsr)
library(tidytext)
library(stringi)
library(purrr)
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
# Chunk 2
# a function to remove dashes from the ends of line (and combine the truncated words)
# NOTE: this function won't work if the chapter passed in ends in a hyphen,
#       but this shouldn't be an issue
remove_dashes <- function(lines) {
# iterate through all of our lines
for (line in 1:(length(lines) - 1)) {
# if the current line we're on is blank then skip it
if(lines[line] == " " | lines[line] == "") {
next
}
# otherwise, we need to check for a dash at the end of the line
# keep track of the last word in the current line
last_word <- word(lines[line], start = -3)
# if the line that  we're on ends in a dash, then we want to remove it
if(substr(last_word, nchar(last_word), nchar(last_word)) == "-") {
# if the next line is blank, then we need to skip it and check the
# next line for the first word
if(lines[line + 1] == " " | lines[line + 1] == "") {
# keep track of the first word
first_word_next_line <- word(lines[line + 2], start = 1)
}
# otherwise, the first word is on the next line
else{
first_word_next_line <- word(lines[line + 1], start = 1)
}
# keep track of the beginning of the current line
# (not including the truncated word at the end)
beginning_of_line <- word(lines[line], end = -4)
# remove the dash from the last (truncated) word
word_without_dash <- gsub("-", "", last_word)
# update the current line so that the dash is gone and the word from
# the line below is added on
lines[line] = paste0(beginning_of_line, " ", word_without_dash, first_word_next_line)
# now, we need to remove the first part of the word from the line below
# so check again to see if the next line is blank
if(lines[line + 1] == " " | lines[line + 1] == "") {
# if it is, we need to update the line two lines down
# this gets rid of only the first word in the specified line
lines[line + 2] <- word(lines[line + 2],
start = 2:nchar(lines[line + 2]),
end = -1)[1]
}
# otherwise we just update the line one down
else {
lines[line + 1] <- word(lines[line + 1],
start = 2:nchar(lines[line + 1]),
end = -1)[1]
}
} # end if statement that checks for a dash
} # end for loop
# return our updated lines with removed dashes
lines
} # end function
# Chunk 3
# Read in sample chapter
sample_chapter <- readLines("chapter_files/chapter01.txt")
# Lines 185-195 before removing hyphens
sample_chapter[185:195]
# Remove hyphens from lines 185-195
remove_dashes(sample_chapter[185:195])
# Chunk 4
# read in the chapter files
location <- "chapter_files/"
chapter_names <- list.files(location)
# read in all chapter.txt files
all_chapters <- map(chapter_names, function(x) readLines(paste0(location, x)))
head(all_chapters[[1]], 30)
# remove dashes from each chapter
for(chapter in 1:length(all_chapters)) {
all_chapters[[chapter]] <- remove_dashes(all_chapters[[chapter]])
}
# just to show that the dashes were removed (compare to output above)
head(all_chapters[[1]], 30)
# Chunk 5
library(tidytext)
library(stringr)
library(tidyr)
library(ggplot2)
data(stop_words)
# get_sentiments("afinn")
# get_sentiments("bing")
# get_sentiments("nrc")
####### PRELIMINARY BING SENTIMENT ANALYSIS ###########
# CHAPTER 17 (AMHERST PRESIDENTS)
text_ch17 <- tibble(text = all_chapters[[17]]) %>%
mutate(linenumber = row_number(),
chapter = "17")
tidy_ch17 <- text_ch17 %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
ch17_sentiment <- tidy_ch17 %>%
inner_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
# CHAPTER 20 (AMHERST PRESIDENTS)
text_ch20 <- tibble(text = all_chapters[[20]]) %>%
mutate(linenumber = row_number(),
chapter = "20")
tidy_ch20 <- text_ch20 %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
ch20_sentiment <- tidy_ch20 %>%
inner_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
# CHAPTER 5 (WILLIAMS)
text_ch5 <- tibble(text = all_chapters[[5]]) %>%
mutate(linenumber = row_number(),
chapter = "5")
tidy_ch5 <- text_ch5 %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
ch5_sentiment <- tidy_ch5 %>%
inner_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
# Chunk 6
tidy_ch17 %>%
count(word, sort = TRUE) %>%
filter(n > 15) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
tidy_ch20  %>%
count(word, sort = TRUE) %>%
filter(n > 15) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
tidy_ch5 %>%
count(word, sort = TRUE) %>%
filter(n > 15) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
# Chunk 7
ch_full <- rbind(tidy_ch17, tidy_ch20, tidy_ch5)
ch_full$chapter <- as.factor(ch_full$chapter)
ch_sentiments <- ch_full %>%
inner_join(get_sentiments("bing")) %>%
count(chapter, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(ch_sentiments, aes(index, sentiment, fill = chapter)) +
geom_col(show.legend = FALSE) +
facet_wrap(~chapter, ncol = 2, scales = "free_x")
# Chunk 8
### Chapter 17
afinn <- tidy_ch17 %>%
inner_join(get_sentiments("afinn")) %>%
group_by(index = linenumber %/% 80) %>%
summarise(sentiment = sum(value)) %>%
mutate(method = "AFINN")
bing_and_nrc <- bind_rows(tidy_ch17 %>%
inner_join(get_sentiments("bing")) %>%
mutate(method = "Bing et al."),
tidy_ch17 %>%
inner_join(get_sentiments("nrc") %>%
filter(sentiment %in% c("positive",
"negative"))) %>%
mutate(method = "NRC")) %>%
count(method, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
bind_rows(afinn,
bing_and_nrc) %>%
ggplot(aes(index, sentiment, fill = method)) +
geom_col(show.legend = FALSE) +
facet_wrap(~method, ncol = 1, scales = "free_y")
library(mosaic)
library(tidyverse)
library(mdsr)
library(tidytext)
library(stringi)
library(purrr)
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
# a function to remove dashes from the ends of line (and combine the truncated words)
# NOTE: this function won't work if the chapter passed in ends in a hyphen,
#       but this shouldn't be an issue
remove_dashes <- function(lines) {
# iterate through all of our lines
for (line in 1:(length(lines) - 1)) {
# if the current line we're on is blank then skip it
if(lines[line] == " " | lines[line] == "") {
next
}
# otherwise, we need to check for a dash at the end of the line
# keep track of the last word in the current line
last_word <- word(lines[line], start = -3)
# if the line that  we're on ends in a dash, then we want to remove it
if(substr(last_word, nchar(last_word), nchar(last_word)) == "-") {
# if the next line is blank, then we need to skip it and check the
# next line for the first word
if(lines[line + 1] == " " | lines[line + 1] == "") {
# keep track of the first word
first_word_next_line <- word(lines[line + 2], start = 1)
}
# otherwise, the first word is on the next line
else{
first_word_next_line <- word(lines[line + 1], start = 1)
}
# keep track of the beginning of the current line
# (not including the truncated word at the end)
beginning_of_line <- word(lines[line], end = -4)
# remove the dash from the last (truncated) word
word_without_dash <- gsub("-", "", last_word)
# update the current line so that the dash is gone and the word from
# the line below is added on
lines[line] = paste0(beginning_of_line, " ", word_without_dash, first_word_next_line)
# now, we need to remove the first part of the word from the line below
# so check again to see if the next line is blank
if(lines[line + 1] == " " | lines[line + 1] == "") {
# if it is, we need to update the line two lines down
# this gets rid of only the first word in the specified line
lines[line + 2] <- word(lines[line + 2],
start = 2:nchar(lines[line + 2]),
end = -1)[1]
}
# otherwise we just update the line one down
else {
lines[line + 1] <- word(lines[line + 1],
start = 2:nchar(lines[line + 1]),
end = -1)[1]
}
} # end if statement that checks for a dash
} # end for loop
# return our updated lines with removed dashes
lines
} # end function
# Read in sample chapter
sample_chapter <- readLines("chapter_files/chapter01.txt")
# Lines 185-195 before removing hyphens
sample_chapter[185:195]
# Remove hyphens from lines 185-195
remove_dashes(sample_chapter[185:195])
test[3]
# Lines 185-195 before removing hyphens
test <- sample_chapter[185:195]
test[3]
test
test[9]
# Lines 185-195 before removing hyphens
test <- sample_chapter[185:195]
test[9] <- "like a village or large town in the Middle States, where tra-  "
test
# Remove hyphens from lines 185-195
remove_dashes(sample_chapter[185:195])
# Remove hyphens from lines 185-195
remove_dashes(test)
test
# Remove hyphens from lines 185-195
remove_dashes(test)
```
library(mosaic)
library(tidyverse)
library(mdsr)
library(tidytext)
library(stringi)
library(purrr)
library(stringr)
library(tidyr)
library(ggplot2)
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
data(stop_words)
# get_sentiments("afinn")
# get_sentiments("bing")
# get_sentiments("nrc")
####### PRELIMINARY BING SENTIMENT ANALYSIS ###########
# CHAPTER 17 (AMHERST PRESIDENTS)
text_ch17 <- tibble(text = all_chapters[[17]]) %>%
mutate(linenumber = row_number(),
chapter = "17")
tidy_ch17 <- text_ch17 %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
ch17_sentiment <- tidy_ch17 %>%
inner_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
# CHAPTER 20 (AMHERST PRESIDENTS)
text_ch20 <- tibble(text = all_chapters[[20]]) %>%
mutate(linenumber = row_number(),
chapter = "20")
tidy_ch20 <- text_ch20 %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
ch20_sentiment <- tidy_ch20 %>%
inner_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
# CHAPTER 5 (WILLIAMS)
text_ch5 <- tibble(text = all_chapters[[5]]) %>%
mutate(linenumber = row_number(),
chapter = "5")
tidy_ch5 <- text_ch5 %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
ch5_sentiment <- tidy_ch5 %>%
inner_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
tidy_ch17 %>%
count(word, sort = TRUE) %>%
filter(n > 15) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
tidy_ch20  %>%
count(word, sort = TRUE) %>%
filter(n > 15) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
tidy_ch5 %>%
count(word, sort = TRUE) %>%
filter(n > 15) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
ch_full <- rbind(tidy_ch17, tidy_ch20, tidy_ch5)
ch_full$chapter <- as.factor(ch_full$chapter)
ch_sentiments <- ch_full %>%
inner_join(get_sentiments("bing")) %>%
count(chapter, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(ch_sentiments, aes(index, sentiment, fill = chapter)) +
geom_col(show.legend = FALSE) +
facet_wrap(~chapter, ncol = 2, scales = "free_x")
shiny::runApp('shiny_app')
?tabsetPanel
runApp('shiny_app')
?fluidRow
runApp('shiny_app')
runApp('shiny_app')
?selectInput
# Initial code -----------------------------------------------------------------
# generate
location <- "../chapter_files/"
chapter_names <- list.files(location)
chapter_names
location
setwd("~/Dropbox (Amherst College)/Amherst_2021/7_Fall_2020/STAT495/git/history-historyB/shiny_app")
# Initial code -----------------------------------------------------------------
# generate
location <- "../chapter_files/"
chapter_names <- list.files(location)
chapter_names
runApp()
?submitButto
?submitButton
runApp()
runApp()
?fluidRow
runApp()
runApp()
?fluidRow
runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?fluidPage
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
?navbarPage
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
